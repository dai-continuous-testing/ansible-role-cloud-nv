# stopping nvserver services

- name: stop nvserver service
  service:
    name: "{{ item }}"
    state: stopped
  become: yes
  with_items:
    - nvproxyserver
    - istpserver
    - "{{ dhcp_service_name[ansible_os_family] }}"
  ignore_errors: yes

# delete old installation (optional)

- name: clear old installation folder
  include_tasks: "tasks/{{ ansible_os_family | os_family_to_os_type }}-uninstall.yml"
  when: clear_before_install == True

# need to check  whether needed backup or not (optional)

- name: backup old installation
  block:
  
    - name: check if folder exists
      stat:
        path: "{{ installation_folder }}"
      register: folder_info

    - name: move old version - for backup
      command: "mv {{ installation_folder }} {{ installation_folder }}-{{ ansible_date_time.epoch }}"
      when: folder_info.stat.isdir is defined and folder_info.stat.isdir

  when: backup_old_installation == True

# copy varfile

- name: copy the varfile
  template:
    src: nvserver.varfile.j2
    dest: "{{ temp_folder }}/{{ (installer_file_name | splitext)[0] }}.varfile"

# mitm proxy client certificate
- name: add client certificate path for mitm proxy
  lineinfile:
    path: "{{ temp_folder }}/{{ (installer_file_name | splitext)[0] }}.varfile"
    line: "{{ item }}"
    regexp: "^{{ item.split('=') | first }}"
  with_items:
    - clientCertificate={{ mitm_certificate_path }}
  become: yes
  when: mitm_use_certificate|bool == true

# check if nvserver.varfile already exists
- name: check if the nvserver.varfile exists
  stat:
    path: "{{ installation_folder }}/.install4j/nvserver.varfile"
  register: server_varfile

# copy varfile to nvserver.varfile
- name: copy installer varfile to nvserver.varfile
  copy:
    src: "{{ temp_folder }}/{{ (installer_file_name | splitext)[0] }}.varfile"
    dest: "{{ installation_folder }}/.install4j/nvserver.varfile"
    mode: 0644
    force: yes
    remote_src: yes
  become: yes
  when: server_varfile.stat.exists

# run the installer

- name: run the installer
  command: "sh {{ temp_folder }}/{{ installer_file_name }} -q"
  become: yes

# configure after installation

- name: update vmoptions file
  lineinfile:
    path: "{{ installation_folder }}/nvproxyserver.vmoptions"
    line: "{{ item }}"
    regexp: "^{{ item.split('=') | first }}"
  with_items: "{{ extra_java_options }}"      
  become: yes

# reset pairing key

- name: reset pairing key
  file:
    path: "{{ installation_folder }}/config/{{ pairing_file_name }}"
    state: absent
  become: yes

- name: update application properties file
  lineinfile:
    path: "{{ installation_folder }}/config/application.properties"
    line: "{{ item.key }}={{ item.value }}"
    regexp: "^{{ item.key | replace('.', '\\.') }}="
  with_dict: "{{ application_properties }}"
  become: yes

- name: notify to start service
  command: echo "notify to start service..."
  notify:
    - start the service  

# reboot the instance after install (optional)

- name: reboot nvserver instance
  reboot:
    reboot_timeout: "{{ reboot_timeout | default(600) }}"
  become: yes
  when: reboot_after_install == True

- name: restart nvserver service
  service:
    name: "{{ item }}"
    state: restarted
  become: yes
  with_items:
    - nvproxyserver
    - istpserver
    - "{{ dhcp_service_name[ansible_os_family] }}"